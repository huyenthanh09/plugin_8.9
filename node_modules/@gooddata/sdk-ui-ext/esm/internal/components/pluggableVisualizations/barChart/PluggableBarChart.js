import { __extends, __spreadArrays } from "tslib";
// (C) 2019-2022 GoodData Corporation
import React from "react";
import { render } from "react-dom";
import isEmpty from "lodash/isEmpty";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { localIdRef, newAttributeAreaSort, newMeasureSort } from "@gooddata/sdk-model";
import { PluggableColumnBarCharts } from "../PluggableColumnBarCharts";
import { BAR_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import BarChartConfigurationPanel from "../../configurationPanels/BarChartConfigurationPanel";
import { AXIS, AXIS_NAME } from "../../../constants/axis";
import { newMeasureSortSuggestion } from "../../../interfaces/SortConfig";
import { getBucketItems } from "../../../utils/bucketHelper";
import { canSortStackTotalValue } from "./sortHelpers";
var PluggableBarChart = /** @class */ (function (_super) {
    __extends(PluggableBarChart, _super);
    function PluggableBarChart(props) {
        var _this = _super.call(this, props) || this;
        _this.secondaryAxis = AXIS_NAME.SECONDARY_X;
        _this.type = VisualizationTypes.BAR;
        _this.defaultControlsProperties = {
            stackMeasures: false,
        };
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableBarChart.prototype.getSupportedPropertiesList = function () {
        return BAR_CHART_SUPPORTED_PROPERTIES[this.axis || AXIS.DUAL] || [];
    };
    PluggableBarChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(BarChartConfigurationPanel, { locale: this.locale, colors: this.colors, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, axis: this.axis }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableBarChart.prototype.getDefaultAndAvailableSort = function (referencePoint, canSortStackTotalValue) {
        var buckets = referencePoint.buckets;
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var stackBy = getBucketItems(buckets, BucketNames.STACK);
        if (viewBy.length === 2) {
            if (measures.length >= 2 && !canSortStackTotalValue) {
                return {
                    currentSort: [
                        newAttributeAreaSort(viewBy[0].localIdentifier, "desc"),
                        newMeasureSort(measures[0].localIdentifier, "desc"),
                    ],
                    availableSorts: [
                        {
                            itemId: localIdRef(viewBy[0].localIdentifier),
                            attributeSort: {
                                normalSortEnabled: true,
                                areaSortEnabled: true,
                            },
                        },
                        {
                            itemId: localIdRef(viewBy[1].localIdentifier),
                            attributeSort: {
                                normalSortEnabled: true,
                                areaSortEnabled: true,
                            },
                            metricSorts: __spreadArrays(measures.map(function (m) { return newMeasureSortSuggestion(m.localIdentifier); })),
                        },
                    ],
                };
            }
            return {
                currentSort: [
                    newAttributeAreaSort(viewBy[0].localIdentifier, "desc"),
                    newAttributeAreaSort(viewBy[1].localIdentifier, "desc"),
                ],
                availableSorts: [
                    {
                        itemId: localIdRef(viewBy[0].localIdentifier),
                        attributeSort: {
                            normalSortEnabled: true,
                            areaSortEnabled: true,
                        },
                    },
                    {
                        itemId: localIdRef(viewBy[1].localIdentifier),
                        attributeSort: {
                            normalSortEnabled: true,
                            areaSortEnabled: true,
                        },
                        metricSorts: __spreadArrays(measures.map(function (m) { return newMeasureSortSuggestion(m.localIdentifier); })),
                    },
                ],
            };
        }
        if (!isEmpty(viewBy) && (!isEmpty(stackBy) || canSortStackTotalValue)) {
            return {
                currentSort: [newAttributeAreaSort(viewBy[0].localIdentifier, "desc")],
                availableSorts: [
                    {
                        itemId: localIdRef(viewBy[0].localIdentifier),
                        attributeSort: {
                            normalSortEnabled: true,
                            areaSortEnabled: true,
                        },
                    },
                ],
            };
        }
        if (!isEmpty(viewBy) && !isEmpty(measures)) {
            return {
                currentSort: [newMeasureSort(measures[0].localIdentifier, "desc")],
                availableSorts: [
                    {
                        itemId: localIdRef(viewBy[0].localIdentifier),
                        attributeSort: {
                            normalSortEnabled: true,
                            areaSortEnabled: false,
                        },
                        metricSorts: __spreadArrays(measures.map(function (m) { return newMeasureSortSuggestion(m.localIdentifier); })),
                    },
                ],
            };
        }
        return {
            currentSort: [],
            availableSorts: [],
        };
    };
    PluggableBarChart.prototype.getSortConfig = function (referencePoint) {
        var buckets = referencePoint.buckets;
        var viewBy = getBucketItems(buckets, BucketNames.VIEW);
        var measures = getBucketItems(buckets, BucketNames.MEASURES);
        var disabled = viewBy.length < 1 || measures.length < 1;
        var currentSort = this.getDefaultAndAvailableSort(referencePoint, canSortStackTotalValue(referencePoint.buckets, referencePoint.properties)).currentSort;
        return Promise.resolve({
            supported: true,
            disabled: disabled,
            currentSort: currentSort,
            availableSorts: [],
        });
    };
    return PluggableBarChart;
}(PluggableColumnBarCharts));
export { PluggableBarChart };
//# sourceMappingURL=PluggableBarChart.js.map