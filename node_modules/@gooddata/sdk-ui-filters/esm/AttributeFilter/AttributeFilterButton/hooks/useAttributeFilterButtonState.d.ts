/// <reference types="lodash" />
import { IAnalyticalBackend, IAttributeElement, IElementsQueryResult } from "@gooddata/sdk-backend-spi";
import { IElementQueryResultWithEmptyItems } from "../../AttributeDropdown/types";
import { IAttributeFilter } from "@gooddata/sdk-model";
export interface IAttributeFilterButtonState {
    selectedFilterOptions: IAttributeElement[];
    appliedFilterOptions: IAttributeElement[];
    isInverted: boolean;
    appliedIsInverted: boolean;
    firstLoad: boolean;
    searchString: string;
    offset: number;
    limit: number;
    isDropdownOpen: boolean;
    validOptions: IElementQueryResultWithEmptyItems;
    uriToAttributeElementMap: Map<string, IAttributeElement>;
    isFiltering: boolean;
    /**
     * This flag simulates previous value for `searchString` value. If the search string changes, it will force
     * elements reloading.
     *
     * Implementation of this flag covers some edge case scenarios which resulted into fetching incorrect
     * elements for current searched value.
     */
    needsReloadAfterSearch: boolean;
}
/**
 * Provides a {@link IAttributeFilterButtonState} and a set of functions to handle the state
 * of {@link AttributeFilterButton} component.
 *
 * @param currentFilter - the filter object to initialize the component's state.
 */
export declare const useAttributeFilterButtonState: (currentFilter: IAttributeFilter, backend: IAnalyticalBackend) => {
    state: IAttributeFilterButtonState;
    onCurrentFilterChange: (currentFilter: IAttributeFilter) => void;
    clearUriToElementMap: () => void;
    resetSelection: () => void;
    mapInitialSelectionElements: (initialElements: IElementsQueryResult, isElementsByRef: boolean) => void;
    resolveAttributeElements: (elements: IElementsQueryResult, parentFilters: IAttributeFilter[], isElementsByRef: boolean) => void;
    onSearch: import("lodash").DebouncedFunc<(query: string) => void>;
    onElementSelect: (selectedFilterOptions: IAttributeElement[], isInverted: boolean) => void;
    backupIsInverted: () => void;
    removeFilteringStatus: () => void;
    onRangeChange: (_searchString: string, from: number, to: number) => void;
    onDropdownClosed: () => void;
    onDropdownOpen: () => void;
};
//# sourceMappingURL=useAttributeFilterButtonState.d.ts.map