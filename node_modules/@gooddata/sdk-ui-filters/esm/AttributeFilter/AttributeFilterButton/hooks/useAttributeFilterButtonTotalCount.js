import { __awaiter, __generator } from "tslib";
// (C) 2022 GoodData Corporation
import { useCancelablePromise } from "@gooddata/sdk-ui";
import { getElementTotalCount, getObjRef, getValidElementsFilters, isParentFilteringEnabled, isParentFiltersElementsByRef, } from "../../utils/AttributeFilterUtils";
import stringify from "json-stable-stringify";
/**
 * Gets the number of the elements available for the attribute, depending on the inserted search
 * query.
 */
export var useAttributeFilterButtonTotalCount = function (props) {
    var context = props.context, state = props.state, ownProps = props.ownProps;
    var validParentFilters = [];
    if (isParentFilteringEnabled(context.backend)) {
        if (ownProps.parentFilters && !isParentFiltersElementsByRef(ownProps.parentFilters)) {
            // eslint-disable-next-line no-console
            console.error("Parent filters must be defined by uris to enable parent-child filtering feature");
        }
        else {
            validParentFilters.push.apply(validParentFilters, getValidElementsFilters(ownProps.parentFilters, ownProps.parentFilterOverAttribute));
        }
    }
    return useCancelablePromise({
        promise: function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getElementTotalCount(context.workspace, context.backend, getObjRef(context.filter, context.identifier), state.searchString, validParentFilters)];
            });
        }); },
    }, [
        context.backend,
        context.workspace,
        context.identifier,
        stringify(ownProps.parentFilters),
        state.searchString,
        context.filter,
    ]);
};
//# sourceMappingURL=useAttributeFilterButtonTotalCount.js.map