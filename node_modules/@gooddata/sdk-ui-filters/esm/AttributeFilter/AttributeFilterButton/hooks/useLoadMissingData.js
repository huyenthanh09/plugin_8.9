// (C) 2022 GoodData Corporation
import { __assign, __awaiter, __generator } from "tslib";
import { useCancelablePromise } from "@gooddata/sdk-ui";
import { getValidElementsFilters, isParentFilteringEnabled, isParentFiltersElementsByRef, needsLoading, } from "../../utils/AttributeFilterUtils";
import isEmpty from "lodash/isEmpty";
var prepareElementsQuery = function (backend, workspace, filterObjRef, parentFilters, parentFilterOverAttribute, offset, limit, searchQuery) {
    var preparedElementQuery = backend
        .workspace(workspace)
        .attributes()
        .elements()
        .forDisplayForm(filterObjRef)
        .withOptions(__assign({}, (!isEmpty(searchQuery) ? { filter: searchQuery } : {})))
        .withOffset(offset)
        .withLimit(limit);
    if (isParentFilteringEnabled(backend)) {
        if (parentFilters && !isParentFiltersElementsByRef(parentFilters)) {
            // eslint-disable-next-line no-console
            console.error("Parent filters must be defined by uris to enable parent-child filtering feature");
        }
        else {
            preparedElementQuery.withAttributeFilters(getValidElementsFilters(parentFilters, parentFilterOverAttribute));
        }
    }
    return preparedElementQuery;
};
/**
 * Fetches missing attribute elements on scrolling.
 */
export var useLoadMissingData = function (props) {
    var context = props.context, state = props.state, ownProps = props.ownProps, onLoadMissingDataSuccess = props.onLoadMissingDataSuccess;
    var promise = needsLoading(state.validOptions, state.offset, state.limit) || state.needsReloadAfterSearch
        ? function () { return __awaiter(void 0, void 0, void 0, function () {
            var preparedElementQuery;
            return __generator(this, function (_a) {
                preparedElementQuery = prepareElementsQuery(context.backend, context.workspace, context.filterObjRef, ownProps.parentFilters, ownProps.parentFilterOverAttribute, state.offset, state.limit, state.searchString);
                return [2 /*return*/, preparedElementQuery.query()];
            });
        }); }
        : null;
    return useCancelablePromise({
        promise: promise,
        onSuccess: function (newElements) {
            onLoadMissingDataSuccess(newElements, ownProps.parentFilters, ownProps.isElementsByRef);
        },
    }, [
        state.selectedFilterOptions,
        state.appliedFilterOptions,
        state.validOptions,
        state.offset,
        state.limit,
        state.searchString,
        state.needsReloadAfterSearch,
        ownProps.parentFilters,
    ]);
};
//# sourceMappingURL=useLoadMissingData.js.map