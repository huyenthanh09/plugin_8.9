import { __awaiter, __generator } from "tslib";
// (C) 2022 GoodData Corporation
import { useMemo } from "react";
import { useCancelablePromise } from "@gooddata/sdk-ui";
import isEmpty from "lodash/isEmpty";
import stringify from "json-stable-stringify";
import { getObjRef } from "../../utils/AttributeFilterUtils";
import { filterAttributeElements, isAttributeElementsByRef } from "@gooddata/sdk-model";
var prepareElementsTitleQuery = function (appliedElements, backend, workspace, currentFilter, identifier) {
    var supportsElementUris = backend.capabilities.supportsElementUris;
    var isElementsByRef = isAttributeElementsByRef(filterAttributeElements(currentFilter));
    var options = {
        uris: appliedElements
            .map(function (element) {
            return supportsElementUris && isElementsByRef ? element.uri : element.title;
        })
            .filter(Boolean),
    };
    return backend
        .workspace(workspace)
        .attributes()
        .elements()
        .forDisplayForm(getObjRef(currentFilter, identifier))
        .withOptions(options.uris.length > 0 ? options : {});
};
/**
 * Fetches data for the initial selection.
 */
export var useFetchInitialElements = function (props) {
    var context = props.context, state = props.state, onFetchInitialElementsSuccess = props.onFetchInitialElementsSuccess, isElementsByRef = props.isElementsByRef;
    var filterObjRef = useMemo(function () { return getObjRef(context.filter, context.identifier); }, [context.filter, context.identifier]);
    return useCancelablePromise({
        promise: isEmpty(state.selectedFilterOptions)
            ? null
            : function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, prepareElementsTitleQuery(state.appliedFilterOptions, context.backend, context.workspace, context.filter, context.identifier).query()];
                });
            }); },
        onSuccess: function (initialElements) {
            onFetchInitialElementsSuccess(initialElements, isElementsByRef);
        },
    }, [
        context.backend,
        context.workspace,
        context.identifier,
        stringify(filterObjRef),
        state.appliedFilterOptions,
    ]);
};
//# sourceMappingURL=useFetchInitialElements.js.map