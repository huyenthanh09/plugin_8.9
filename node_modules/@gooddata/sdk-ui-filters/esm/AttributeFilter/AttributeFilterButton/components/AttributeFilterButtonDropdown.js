import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import { MediaQueries } from "../../../constants";
import AttributeFilterButtonDropdownButton from "./AttributeFilterButtonDropdownButton";
import { Dropdown } from "@gooddata/sdk-ui-kit";
import MediaQuery from "react-responsive";
import AttributeFilterButtonDefaultDropdownBody from "./AttributeFilterButtonDefaultDropdownBody";
import noop from "lodash/noop";
var AttributeFilterButtonDropdown = function (props) {
    var isFiltering = props.isFiltering, isDropdownOpen = props.isDropdownOpen, isElementsLoading = props.isElementsLoading, isOriginalTotalCountLoading = props.isOriginalTotalCountLoading, title = props.title, subtitle = props.subtitle, selectedFilterOptions = props.selectedFilterOptions, onDropdownOpenStateChanged = props.onDropdownOpenStateChanged, isAllFiltered = props.isAllFiltered, hasNoData = props.hasNoData, onApplyButtonClicked = props.onApplyButtonClicked, getDropdownBodyProps = props.getDropdownBodyProps, renderBody = props.renderBody;
    return (React.createElement(Dropdown, { closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, enableEventPropagation: true, alignPoints: [
            { align: "bl tl" },
            { align: "tr tl" },
            { align: "br tr", offset: { x: -11 } },
            { align: "tr tl", offset: { x: 0, y: -100 } },
            { align: "tr tl", offset: { x: 0, y: -50 } },
        ], renderButton: function (_a) {
            var toggleDropdown = _a.toggleDropdown;
            return (React.createElement(MediaQuery, { query: MediaQueries.IS_MOBILE_DEVICE }, function (isMobile) { return (React.createElement("span", { onClick: toggleDropdown },
                React.createElement(AttributeFilterButtonDropdownButton, { isFiltering: isFiltering, isOpen: isDropdownOpen, isMobile: isMobile, title: title, subtitleText: subtitle, subtitleItemCount: selectedFilterOptions.length, isLoaded: !isOriginalTotalCountLoading }))); }));
        }, onOpenStateChanged: onDropdownOpenStateChanged, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown;
            return (React.createElement(MediaQuery, { query: MediaQueries.IS_MOBILE_DEVICE }, function (isMobile) {
                return renderBody ? (renderBody(__assign(__assign({}, getDropdownBodyProps(function () {
                    onApplyButtonClicked(closeDropdown);
                }, function () {
                    closeDropdown();
                })), { isElementsLoading: isElementsLoading, isLoaded: !isOriginalTotalCountLoading, onConfigurationChange: noop, attributeFilterRef: null, isMobile: isMobile }))) : (React.createElement(AttributeFilterButtonDefaultDropdownBody, { allElementsFiltered: isAllFiltered, onApplyButtonClicked: onApplyButtonClicked, closeDropdown: closeDropdown, hasNoData: hasNoData, bodyProps: getDropdownBodyProps(function () {
                        onApplyButtonClicked(closeDropdown);
                    }, function () {
                        closeDropdown();
                    }, isMobile) }));
            }));
        } }));
};
export default AttributeFilterButtonDropdown;
//# sourceMappingURL=AttributeFilterButtonDropdown.js.map