// (C) 2022 GoodData Corporation
import React, { useEffect, useRef, useState } from "react";
import { stringUtils } from "@gooddata/util";
import isEmpty from "lodash/isEmpty";
import cx from "classnames";
import { ShortenedText } from "@gooddata/sdk-ui-kit";
import { ATTRIBUTE_FILTER_BITTON_TOOLTIP_ALIGN_POINT } from "../constants";
var AttributeFilterButtonDropdownButton = function (props) {
    var isMobile = props.isMobile, isOpen = props.isOpen, title = props.title, subtitleItemCount = props.subtitleItemCount, subtitleText = props.subtitleText, isFiltering = props.isFiltering, isLoaded = props.isLoaded;
    var subtitleSelectedItemsRef = useRef(null);
    var _a = useState(false), displayItemCount = _a[0], setDisplayItemCount = _a[1];
    var _b = useState(""), subtitle = _b[0], setSubtitle = _b[1];
    useEffect(function () {
        if (!isEmpty(subtitleText) && subtitleText !== subtitle) {
            setSubtitle(subtitleText);
        }
    }, [subtitleText]);
    useEffect(function () {
        var element = subtitleSelectedItemsRef.current;
        if (!element) {
            return;
        }
        var roundedWidth = Math.ceil(element.getBoundingClientRect().width);
        var displayItemCount = roundedWidth < element.scrollWidth;
        setDisplayItemCount(displayItemCount);
    }, [subtitle]);
    return (React.createElement("div", { className: cx("attribute-filter-button", "s-attribute-filter", "s-" + stringUtils.simplifyText(title), {
            "is-active": isOpen,
            "gd-attribute-filter-button-mobile": isMobile,
            "gd-attribute-filter-button-is-filtering": isFiltering,
            "is-loaded": isLoaded,
        }) },
        React.createElement("div", { className: "button-content" },
            React.createElement("div", { className: "button-title" },
                React.createElement(ShortenedText, { tooltipAlignPoints: ATTRIBUTE_FILTER_BITTON_TOOLTIP_ALIGN_POINT, className: "s-attribute-filter-button-title" }, title)),
            React.createElement("div", { className: "button-subtitle" },
                React.createElement("span", { className: "button-selected-items s-attribute-filter-button-subtitle", ref: subtitleSelectedItemsRef }, subtitle),
                displayItemCount && (React.createElement("span", { className: "button-selected-items-count" }, "(" + subtitleItemCount + ")"))))));
};
export default AttributeFilterButtonDropdownButton;
//# sourceMappingURL=AttributeFilterButtonDropdownButton.js.map