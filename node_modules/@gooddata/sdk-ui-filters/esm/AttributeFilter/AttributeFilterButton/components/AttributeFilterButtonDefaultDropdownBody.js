import { __assign } from "tslib";
// (C) 2022 GoodData Corporation
import React from "react";
import { AttributeDropdownBody, } from "../../AttributeDropdown/AttributeDropdownBody";
import { MediaQueries } from "../../../constants";
import { AttributeDropdownAllFilteredOutBody } from "../../AttributeDropdown/AttributeDropdownAllFilteredOutBody";
import MediaQuery from "react-responsive";
import { useIntl } from "react-intl";
import { NoData } from "@gooddata/sdk-ui-kit";
var AttributeFilterButtonDefaultDropdownBody = function (props) {
    var allElementsFiltered = props.allElementsFiltered, onApplyButtonClicked = props.onApplyButtonClicked, closeDropdown = props.closeDropdown, hasNoData = props.hasNoData, bodyProps = props.bodyProps;
    var intl = useIntl();
    // function renderDefaultBody(bodyProps: IAttributeDropdownBodyProps, closeDropdown: () => void) {
    return allElementsFiltered ? (React.createElement(MediaQuery, { query: MediaQueries.IS_MOBILE_DEVICE }, function (isMobile) { return (React.createElement(AttributeDropdownAllFilteredOutBody, { parentFilterTitles: bodyProps.parentFilterTitles, onApplyButtonClick: function () { return onApplyButtonClicked(closeDropdown); }, onCancelButtonClick: closeDropdown, isMobile: isMobile })); })) : hasNoData ? (React.createElement(NoData, { noDataLabel: intl.formatMessage({ id: "attributesDropdown.noData" }) })) : (React.createElement(AttributeDropdownBody, __assign({}, bodyProps, { isMobile: bodyProps.isFullWidth })));
};
export default AttributeFilterButtonDefaultDropdownBody;
//# sourceMappingURL=AttributeFilterButtonDefaultDropdownBody.js.map