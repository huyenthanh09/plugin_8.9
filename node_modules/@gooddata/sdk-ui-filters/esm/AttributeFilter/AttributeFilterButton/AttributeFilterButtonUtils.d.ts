import { IAnalyticalBackend, IAttributeElement } from "@gooddata/sdk-backend-spi";
import { IAttributeFilter } from "@gooddata/sdk-model";
import { UseCancelablePromiseStatus } from "@gooddata/sdk-ui";
import { IntlShape } from "react-intl";
/**
 * Gets the selection from the initial {@link @gooddata/sdk-model#IAttributeFilter} object.
 */
export declare const getInitialSelectedOptions: (currentFilter: IAttributeFilter) => IAttributeElement[];
/**
 * Gets the isInverted property from the initial {@link @gooddata/sdk-model#IAttributeFilter} object.
 */
export declare const getInitialIsInverted: (currentFilter: IAttributeFilter) => boolean;
export declare const isCancelablePromisePending: (cancelablePromiseStatus: UseCancelablePromiseStatus) => boolean;
export declare const isCancelablePromiseLoading: (cancelablePromiseStatus: UseCancelablePromiseStatus) => boolean;
export declare const isCancelablePromisePendingOrLoading: (cancelablePromiseStatus: UseCancelablePromiseStatus) => boolean;
/**
 * Applies a telemetry to the {@link @gooddata/sdk-backend-spi#IAnalyticalBackend} object.
 */
export declare const getBackend: (backend: IAnalyticalBackend, props: any) => IAnalyticalBackend;
/**
 * Creates the new {@link @gooddata/sdk-model#IAttributeFilter} with the actual selection
 * and actual inverted state property.
 */
export declare const createFilter: (filter: IAttributeFilter, isInverted: boolean, selectedFilterOptions: IAttributeElement[], identifier: string, emptyFilter?: boolean) => IAttributeFilter;
/**
 * Returns number of selected elements. If the selection is inverted, it returns
 * the number of all elements of the attribute without the actual selection,
 * the size of the actual selection otherwise.
 */
export declare const getNumberOfSelectedItems: (originalTotalCount: number, filterOptions: IAttributeElement[], isInverted: boolean) => number;
interface GetSubtitleProps {
    loadingProps: {
        isElementsLoading: boolean;
        isTotalCountLoading: boolean;
    };
    ownProps: {
        isAllFiltered: boolean;
        isElementsByRef: boolean;
        currentFilter: IAttributeFilter;
        identifier: string;
        originalTotalCount: number;
        intl: IntlShape;
    };
    state: {
        isInverted: boolean;
        isFiltering: boolean;
        selectedFilterOptions: IAttributeElement[];
        uriToAttributeElementMap: Map<string, IAttributeElement>;
        searchString: string;
        firstLoad: boolean;
    };
}
/**
 * Gets the subtitle according to current selection and loading status of the component.
 */
export declare const getSubtitle: (props: GetSubtitleProps) => string;
export declare const checkFilterSetupForBackend: (filter: IAttributeFilter, backend: IAnalyticalBackend) => void;
export {};
//# sourceMappingURL=AttributeFilterButtonUtils.d.ts.map