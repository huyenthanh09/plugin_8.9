import { __assign, __awaiter, __generator, __read, __spread } from "tslib";
import { getGranteeLabel, GranteeGroupAll, hasGroupAll, sortGranteesByName } from "../utils";
import { mapWorkspaceUserGroupToGrantee, mapWorkspaceUserToGrantee } from "../../shareDialogMappers";
var createErrorOption = function (intl) {
    return [
        {
            isDisabled: true,
            type: "error",
            label: intl.formatMessage({
                id: "shareDialog.share.grantee.add.search.error.message",
            }),
        },
    ];
};
var matchAllGroupQueryString = function (query, allGroupLabel) {
    return allGroupLabel.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1;
};
/**
 * @internal
 */
export var loadGranteeOptionsPromise = function (currentUserRef, appliedGrantees, backend, workspace, intl) {
    return function (inputValue) { return __awaiter(void 0, void 0, void 0, function () {
        var usersOption, groupsOption, workspaceUsersQuery, workspaceGroupsQuery, _a, workspaceUsers, workspaceGroups, mappedUsers, mappedGroups, allGroupLabel, groupAllOption, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    usersOption = {};
                    groupsOption = {};
                    if (inputValue) {
                        usersOption = __assign(__assign({}, usersOption), { search: "%" + inputValue });
                        groupsOption = __assign(__assign({}, groupsOption), { search: "" + inputValue });
                    }
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    workspaceUsersQuery = backend.workspace(workspace).users().withOptions(usersOption).query();
                    workspaceGroupsQuery = backend.workspace(workspace).userGroups().query(groupsOption);
                    return [4 /*yield*/, Promise.all([
                            workspaceUsersQuery,
                            workspaceGroupsQuery,
                        ])];
                case 2:
                    _a = __read.apply(void 0, [_c.sent(), 2]), workspaceUsers = _a[0], workspaceGroups = _a[1];
                    mappedUsers = workspaceUsers.items
                        .map(function (item) { return mapWorkspaceUserToGrantee(item, currentUserRef); })
                        .sort(sortGranteesByName(intl))
                        .map(function (user) {
                        return {
                            label: getGranteeLabel(user, intl),
                            value: user,
                        };
                    });
                    mappedGroups = workspaceGroups.items
                        .map(mapWorkspaceUserGroupToGrantee)
                        .sort(sortGranteesByName(intl))
                        .map(function (group) {
                        return {
                            label: getGranteeLabel(group, intl),
                            value: group,
                        };
                    });
                    allGroupLabel = getGranteeLabel(GranteeGroupAll, intl);
                    if (!hasGroupAll(appliedGrantees) && matchAllGroupQueryString(inputValue, allGroupLabel)) {
                        groupAllOption = {
                            label: allGroupLabel,
                            value: GranteeGroupAll,
                        };
                        mappedGroups = __spread([groupAllOption], mappedGroups);
                    }
                    return [2 /*return*/, [
                            {
                                label: intl.formatMessage({ id: "shareDialog.share.grantee.add.label.group" }),
                                options: mappedGroups,
                            },
                            {
                                label: intl.formatMessage({ id: "shareDialog.share.grantee.add.label.user" }),
                                options: mappedUsers,
                            },
                        ]];
                case 3:
                    _b = _c.sent();
                    return [2 /*return*/, createErrorOption(intl)];
                case 4: return [2 /*return*/];
            }
        });
    }); };
};
//# sourceMappingURL=loadGranteeOptionsPromise.js.map