// (C) 2021 GoodData Corporation
import React, { useCallback, useEffect, useMemo, useRef } from "react";
import debounce from "debounce-promise";
import { useIntl } from "react-intl";
import AsyncSelect from "react-select/async";
import { useBackendStrict, useWorkspaceStrict } from "@gooddata/sdk-ui";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { isGranteeItem } from "./types";
import { EmptyRenderer, GroupHeadingRenderer, InputRendered, LoadingMessageRenderer, MenuListRendered, NoOptionsMessageRenderer, OptionRenderer, } from "./AsyncSelectComponents";
import { loadGranteeOptionsPromise } from "./backend/loadGranteeOptionsPromise";
var SEARCH_INTERVAL = 400;
/**
 * @internal
 */
export var AddGranteeSelect = function (props) {
    var appliedGrantees = props.appliedGrantees, currentUserRef = props.currentUserRef, onSelectGrantee = props.onSelectGrantee;
    var backend = useBackendStrict();
    var workspace = useWorkspaceStrict();
    var intl = useIntl();
    var selectRef = useRef(null);
    useEffect(function () {
        selectRef.current.focus();
    }, []);
    var onSelect = useCallback(function (value) {
        var grantee = value.value;
        if (isGranteeItem(grantee)) {
            onSelectGrantee(grantee);
        }
    }, [onSelectGrantee]);
    var noOptionsMessage = useMemo(function () { return function () {
        return intl.formatMessage({
            id: "shareDialog.share.grantee.add.search.no.matching.items",
        });
    }; }, []);
    var loadOptions = useMemo(function () {
        return debounce(loadGranteeOptionsPromise(currentUserRef, appliedGrantees, backend, workspace, intl), SEARCH_INTERVAL, {
            leading: true,
        });
    }, [backend, workspace, intl, appliedGrantees]);
    var onKeyDownCallback = useCallback(function (e) {
        var target = e.target;
        // react-select has default behavior on space and tab key  - open menu / select first option etc.
        // We need disable this behavior for space key by set e.preventDefault when input is empty and for tab key completely
        //space
        if (e.keyCode === 32 && !target.value) {
            e.preventDefault();
        }
        // tab
        if (e.keyCode === 9) {
            e.preventDefault();
        }
    }, []);
    var filterOption = function (option) {
        var grantee = option.value;
        if (isGranteeItem(grantee)) {
            return !appliedGrantees.some(function (g) {
                return areObjRefsEqual(g.id, grantee.id);
            });
        }
        return true;
    };
    return (React.createElement("div", { className: "gd-share-dialog-content-select" },
        React.createElement(AsyncSelect, { ref: selectRef, defaultMenuIsOpen: true, classNamePrefix: "gd-share-dialog", components: {
                DropdownIndicator: EmptyRenderer,
                IndicatorSeparator: EmptyRenderer,
                Input: InputRendered,
                Option: OptionRenderer,
                GroupHeading: GroupHeadingRenderer,
                LoadingMessage: LoadingMessageRenderer,
                LoadingIndicator: EmptyRenderer,
                MenuList: MenuListRendered,
                NoOptionsMessage: NoOptionsMessageRenderer,
            }, loadOptions: loadOptions, defaultOptions: true, placeholder: intl.formatMessage({
                id: "shareDialog.share.grantee.add.search.placeholder",
            }), onKeyDown: onKeyDownCallback, noOptionsMessage: noOptionsMessage, onChange: onSelect, value: null, filterOption: filterOption })));
};
//# sourceMappingURL=AddGranteeSelect.js.map