// (C) 2021 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { ShareDialogBase } from "./ShareDialogBase/ShareDialogBase";
import { mapGranteesToAccessGrantees, mapGranteesToShareStatus, mapOwnerToGrantee, mapUserToInactiveOwner, mapSharedObjectToAffectedSharedObject, } from "./shareDialogMappers";
import { BackendProvider, IntlWrapper, UnexpectedSdkError, useBackendStrict, useWorkspaceStrict, WorkspaceProvider, } from "@gooddata/sdk-ui";
import { ComponentLabelsProvider } from "./ShareDialogBase/ComponentLabelsContext";
/**
 * @internal
 */
export var ShareDialog = function (props) {
    var backend = props.backend, workspace = props.workspace, locale = props.locale, sharedObject = props.sharedObject, currentUserRef = props.currentUserRef, onApply = props.onApply, onCancel = props.onCancel, onError = props.onError, isLockingSupported = props.isLockingSupported, labels = props.labels;
    var effectiveBackend = useBackendStrict(backend);
    var effectiveWorkspace = useWorkspaceStrict(workspace);
    var onShareDialogBaseError = useCallback(function (err) {
        onError === null || onError === void 0 ? void 0 : onError(new UnexpectedSdkError(err.message, err));
    }, [onError]);
    var owner = useMemo(function () {
        if (sharedObject.createdBy) {
            return mapOwnerToGrantee(sharedObject.createdBy, currentUserRef);
        }
        return mapUserToInactiveOwner();
    }, [sharedObject, currentUserRef]);
    var onSubmit = useCallback(function (grantees, granteesToAdd, granteesToDelete, isUnderLenientControl, isLocked) {
        var shareStatus = mapGranteesToShareStatus(grantees, granteesToAdd, granteesToDelete);
        var isUnderStrictControl = shareStatus !== "public" && !isUnderLenientControl;
        var add = mapGranteesToAccessGrantees(granteesToAdd);
        var del = mapGranteesToAccessGrantees(granteesToDelete);
        onApply({
            shareStatus: shareStatus,
            isUnderStrictControl: isUnderStrictControl,
            isLocked: isLocked,
            granteesToAdd: add,
            granteesToDelete: del,
        });
    }, [onApply]);
    var affectedSharedObject = useMemo(function () {
        var isLeniencyControlSupported = !effectiveBackend.capabilities.usesStrictAccessControl;
        return mapSharedObjectToAffectedSharedObject(sharedObject, owner, isLockingSupported, isLeniencyControlSupported);
    }, [sharedObject, owner, isLockingSupported, effectiveBackend]);
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(BackendProvider, { backend: effectiveBackend },
            React.createElement(WorkspaceProvider, { workspace: effectiveWorkspace },
                React.createElement(ComponentLabelsProvider, { labels: labels },
                    React.createElement(ShareDialogBase, { currentUserRef: currentUserRef, sharedObject: affectedSharedObject, onCancel: onCancel, onSubmit: onSubmit, onError: onShareDialogBaseError }))))));
};
//# sourceMappingURL=ShareDialog.js.map