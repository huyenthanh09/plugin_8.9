// (C) 2021 GoodData Corporation
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { isUserAccess, isUserGroupAccess } from "@gooddata/sdk-backend-spi";
import { typesUtils } from "@gooddata/util";
import { isGranteeGroupAll, isGranteeUserInactive, isGranteeUser, } from "./ShareDialogBase/types";
import { GranteeGroupAll, InactiveOwner, getAppliedGrantees, hasGroupAll } from "./ShareDialogBase/utils";
var mapUserStatusToGranteeStatus = function (status) {
    if (status === "DISABLED") {
        return "Inactive";
    }
    return "Active";
};
/**
 * @internal
 */
export var mapWorkspaceUserToGrantee = function (user, currentUserRef) {
    return {
        type: "user",
        id: user.ref,
        name: mapUserFullName(user),
        email: user.email,
        isOwner: false,
        isCurrentUser: areObjRefsEqual(user.ref, currentUserRef),
        status: mapUserStatusToGranteeStatus(user.status),
    };
};
/**
 * @internal
 */
export var mapWorkspaceUserGroupToGrantee = function (userGroup) {
    return {
        id: userGroup.ref,
        type: "group",
        name: userGroup.name,
    };
};
/**
 * @internal
 */
export var mapUserFullName = function (user) {
    if (user.fullName) {
        return user.fullName;
    }
    return user.firstName + " " + user.lastName;
};
/**
 * @internal
 */
export var mapOwnerToGrantee = function (user, currentUserRef) {
    return {
        type: "user",
        id: user.ref,
        name: mapUserFullName(user),
        email: user.email,
        isOwner: true,
        isCurrentUser: areObjRefsEqual(user.ref, currentUserRef),
        status: "Active",
    };
};
/**
 * @internal
 */
export var mapUserToInactiveOwner = function () {
    return InactiveOwner;
};
/**
 * @internal
 */
export var mapShareStatusToGroupAll = function (shareStatus) {
    if (shareStatus === "public") {
        return GranteeGroupAll;
    }
};
/**
 * @internal
 */
export var mapGranteesToAccessGrantees = function (grantees) {
    var guard = typesUtils.combineGuards(isGranteeGroupAll, isGranteeUserInactive);
    return grantees
        .filter(function (g) { return !guard(g); })
        .map(function (g) {
        var type = isGranteeUser(g) ? "user" : "group";
        return {
            granteeRef: g.id,
            type: type,
        };
    });
};
export var mapAccessGranteeDetailToGrantee = function (accessGranteeDetail, currentUserRef) {
    if (isUserAccess(accessGranteeDetail)) {
        return mapWorkspaceUserToGrantee(accessGranteeDetail.user, currentUserRef);
    }
    else if (isUserGroupAccess(accessGranteeDetail)) {
        return mapWorkspaceUserGroupToGrantee(accessGranteeDetail.userGroup);
    }
};
/**
 * @internal
 */
export var mapGranteesToShareStatus = function (grantees, granteesToAdd, granteesToDelete) {
    var appliedGrantees = getAppliedGrantees(grantees, granteesToAdd, granteesToDelete);
    if (hasGroupAll(appliedGrantees)) {
        return "public";
    }
    if (appliedGrantees.length > 0) {
        return "shared";
    }
    return "private";
};
/**
 * @internal
 */
export var mapSharedObjectToAffectedSharedObject = function (sharedObject, owner, isLockingSupported, isLeniencyControlSupported) {
    var ref = sharedObject.ref, shareStatus = sharedObject.shareStatus, isLocked = sharedObject.isLocked, isUnderStrictControl = sharedObject.isUnderStrictControl;
    return {
        ref: ref,
        shareStatus: shareStatus,
        owner: owner,
        isLocked: !!isLocked,
        isUnderLenientControl: !isUnderStrictControl,
        isLockingSupported: isLockingSupported,
        isLeniencyControlSupported: isLeniencyControlSupported,
    };
};
//# sourceMappingURL=shareDialogMappers.js.map