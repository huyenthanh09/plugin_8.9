var _a;
import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useRef, useEffect, useCallback } from "react";
import { isAttributeSort, sortDirection, isAttributeAreaSort, newAttributeSort, newAttributeAreaSort, newMeasureSort, } from "@gooddata/sdk-model";
import { SORT_TARGET_TYPE } from "../types";
import { Dropdown, DropdownButton, DropdownList } from "../../Dropdown";
import { SingleSelectListItem } from "../../List";
import { MeasureDropdown } from "../MeasureDropdown/MeasureDropdown";
var icons = (_a = {},
    _a[SORT_TARGET_TYPE.ALPHABETICAL_ASC] = "gd-icon-sort-alphabetical-asc",
    _a[SORT_TARGET_TYPE.ALPHABETICAL_DESC] = "gd-icon-sort-alphabetical-desc",
    _a[SORT_TARGET_TYPE.NUMERICAL_ASC] = "gd-icon-sort-numerical-asc",
    _a[SORT_TARGET_TYPE.NUMERICAL_DESC] = "gd-icon-sort-numerical-desc",
    _a);
var getIconClassNameBySelection = function (sortType) { return icons[sortType]; };
var getSortTypeItems = function (available, intl) {
    var sortTypeItems = [];
    if (available.attributeSort.normalSortEnabled) {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.ALPHABETICAL_ASC,
            title: intl.formatMessage({ id: "sorting.type.alphabetical.asc" }),
            sortDirection: "asc",
            type: "alphabetical",
            localIdentifier: available.itemId.localIdentifier,
        }, {
            id: SORT_TARGET_TYPE.ALPHABETICAL_DESC,
            title: intl.formatMessage({ id: "sorting.type.alphabetical.desc" }),
            sortDirection: "desc",
            type: "alphabetical",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    if (available.attributeSort.areaSortEnabled ||
        (available.metricSorts && available.metricSorts.length > 0)) {
        sortTypeItems.push({
            id: SORT_TARGET_TYPE.NUMERICAL_ASC,
            title: intl.formatMessage({ id: "sorting.type.numerical.asc" }),
            sortDirection: "asc",
            type: "numerical",
            localIdentifier: available.itemId.localIdentifier,
        }, {
            id: SORT_TARGET_TYPE.NUMERICAL_DESC,
            title: intl.formatMessage({ id: "sorting.type.numerical.desc" }),
            sortDirection: "desc",
            type: "numerical",
            localIdentifier: available.itemId.localIdentifier,
        });
    }
    return sortTypeItems;
};
var getButtonValue = function (sortTypeItems, type, direction) {
    return sortTypeItems.find(function (sortTypeItems) { return sortTypeItems.id === type + "-" + direction; });
};
export var AttributeDropdown = function (_a) {
    var currentSortItem = _a.currentSortItem, availableSorts = _a.availableSorts, bucketItemNames = _a.bucketItemNames, intl = _a.intl, index = _a.index, onSelect = _a.onSelect, disabledExplanationTooltip = _a.disabledExplanationTooltip, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var _b = __read(useState(0), 2), width = _b[0], setWidth = _b[1];
    var _c = __read(useState(currentSortItem), 2), currentItem = _c[0], setCurrentItem = _c[1];
    var buttonRef = useRef(null);
    useEffect(function () {
        if (buttonRef && buttonRef.current) {
            setWidth(buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current.getBoundingClientRect().width);
        }
    }, []);
    var attributeSelectHandler = useCallback(function (item) {
        var newCurrentItem;
        if (item.type === "alphabetical") {
            newCurrentItem = newAttributeSort(item.localIdentifier, item.sortDirection);
        }
        else if (availableSorts.attributeSort.areaSortEnabled) {
            newCurrentItem = newAttributeAreaSort(item.localIdentifier, item.sortDirection);
        }
        else {
            newCurrentItem = newMeasureSort(item.localIdentifier, item.sortDirection);
        }
        setCurrentItem(newCurrentItem);
        onSelect(newCurrentItem);
    }, [currentItem, setCurrentItem, onSelect]);
    var measureSelectHandler = useCallback(function (newCurrentItem) {
        setCurrentItem(newCurrentItem);
        onSelect(newCurrentItem);
    }, [currentItem, setCurrentItem, onSelect]);
    var sortTypeItems = getSortTypeItems(availableSorts, intl);
    var currentType = isAttributeSort(currentItem) && !isAttributeAreaSort(currentItem) ? "alphabetical" : "numerical";
    var direction = sortDirection(currentItem);
    var buttonValue = getButtonValue(sortTypeItems, currentType, direction);
    return (React.createElement(React.Fragment, null,
        React.createElement(Dropdown, { closeOnMouseDrag: true, closeOnParentScroll: true, renderButton: function (_a) {
                var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                return (React.createElement("div", { ref: buttonRef },
                    React.createElement(DropdownButton, { className: "s-sort-type-attribute-button-" + index + " s-" + currentType + "-dropdown-button", value: buttonValue.title, isOpen: isOpen, onClick: toggleDropdown, iconLeft: getIconClassNameBySelection(currentType + "-" + direction) })));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement(DropdownList, { className: "gd-attribute-sorting-dropdown-body s-attribute-sorting-dropdown-body", items: sortTypeItems, width: width, renderItem: function (_a) {
                        var item = _a.item;
                        var isSelected = item.id === currentType + "-" + direction;
                        var iconClass = getIconClassNameBySelection(item.type + "-" + item.sortDirection);
                        return (React.createElement(SingleSelectListItem, { isSelected: isSelected, className: iconClass, title: item.title, onClick: function () {
                                attributeSelectHandler(item);
                                closeDropdown();
                            } }));
                    } }));
            } }),
        currentType === "numerical" && (React.createElement(MeasureDropdown, { currentItem: currentItem, intl: intl, availableSorts: availableSorts, bucketItemNames: bucketItemNames, onSelect: measureSelectHandler, disabledExplanationTooltip: disabledExplanationTooltip, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric }))));
};
//# sourceMappingURL=AttributeDropdown.js.map