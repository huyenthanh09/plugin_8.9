import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useRef, useEffect, useCallback } from "react";
import cx from "classnames";
import { isMeasureLocator, sortDirection, isMeasureSort, newAttributeAreaSort, newMeasureSort, objRefToString, isAttributeAreaSort, } from "@gooddata/sdk-model";
import { stringUtils } from "@gooddata/util";
import { DropdownButton } from "../../Dropdown/DropdownButton";
import { BubbleHoverTrigger } from "../../Bubble/BubbleHoverTrigger";
import { Bubble } from "../../Bubble/Bubble";
import { Dropdown, DropdownList } from "../../Dropdown";
var getItems = function (intl, measures, measureNames, areaSortEnabled, availableId) {
    var measureValues = [];
    if (areaSortEnabled) {
        measureValues.push({
            id: "aggregation",
            title: intl.formatMessage({
                id: "sorting.sum.of.all.measure",
            }),
            localIdentifier: objRefToString(availableId),
        });
    }
    if (measures) {
        measures.map(function (measure) {
            var measureLocator = measure.locators.find(isMeasureLocator);
            var bucket = measureNames[measureLocator.measureLocatorItem.measureIdentifier];
            measureValues.push({
                id: measureLocator.measureLocatorItem.measureIdentifier,
                title: bucket === null || bucket === void 0 ? void 0 : bucket.name,
                sequenceNumber: bucket === null || bucket === void 0 ? void 0 : bucket.sequenceNumber,
                localIdentifier: measureLocator.measureLocatorItem.measureIdentifier,
            });
        });
    }
    return measureValues;
};
var getButtonValue = function (currentItem, intl, measureNames) {
    var _a, _b, _c;
    var buttonValue;
    if (isAttributeAreaSort(currentItem)) {
        buttonValue = {
            id: "aggregation",
            title: intl.formatMessage({ id: "sorting.sum.of.all.measure" }),
        };
    }
    else if (isMeasureSort(currentItem)) {
        var measureLocator = currentItem.measureSortItem.locators.find(isMeasureLocator);
        buttonValue = {
            id: (_a = measureNames[measureLocator.measureLocatorItem.measureIdentifier]) === null || _a === void 0 ? void 0 : _a.name,
            title: (_b = measureNames[measureLocator.measureLocatorItem.measureIdentifier]) === null || _b === void 0 ? void 0 : _b.name,
            sequenceNumber: (_c = measureNames[measureLocator.measureLocatorItem.measureIdentifier]) === null || _c === void 0 ? void 0 : _c.sequenceNumber,
        };
    }
    return buttonValue;
};
var getMeasureIconClassNameBySelected = function (id, enableRenamingMeasureToMetric) {
    if (id === "aggregation") {
        return "gd-icon-aggregation";
    }
    else if (enableRenamingMeasureToMetric) {
        return "gd-icon-metric";
    }
    else {
        return "gd-icon-measure";
    }
};
export var MeasureDropdown = function (_a) {
    var currentItem = _a.currentItem, availableSorts = _a.availableSorts, bucketItemNames = _a.bucketItemNames, intl = _a.intl, onSelect = _a.onSelect, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var _b = __read(useState(0), 2), width = _b[0], setWidth = _b[1];
    var buttonRef = useRef();
    var measures = availableSorts.metricSorts;
    var areaSortEnabled = availableSorts.attributeSort.areaSortEnabled;
    var items = getItems(intl, measures, bucketItemNames, areaSortEnabled, availableSorts.itemId);
    var disableDropdown = items.length === 1;
    var buttonValue = getButtonValue(currentItem, intl, bucketItemNames);
    var measureName = buttonValue.sequenceNumber
        ? buttonValue.title + " (" + buttonValue.sequenceNumber + ")"
        : buttonValue.title;
    useEffect(function () {
        if (buttonRef && buttonRef.current) {
            setWidth(buttonRef.current.getBoundingClientRect().width);
        }
    }, []);
    var onMeasureSelectHandler = useCallback(function (item) {
        var direction = sortDirection(currentItem);
        if (item.id === "aggregation" && availableSorts.attributeSort.areaSortEnabled) {
            onSelect(newAttributeAreaSort(item.localIdentifier, direction));
        }
        else {
            onSelect(newMeasureSort(item.localIdentifier, direction));
        }
    }, [currentItem, onSelect]);
    return (React.createElement("div", { className: "sort-measure-section" },
        React.createElement("span", { className: "select-label" },
            React.createElement("span", null, "by")),
        React.createElement("div", { className: "measure-sorting-dropdown" }, disableDropdown ? (React.createElement(React.Fragment, null,
            React.createElement(BubbleHoverTrigger, null,
                React.createElement(DropdownButton, { className: "s-inner-aggregation-disabled-button s-inner-measure-dropdown-button", value: measureName, disabled: true, iconLeft: getMeasureIconClassNameBySelected(buttonValue.id, enableRenamingMeasureToMetric) }),
                React.createElement(Bubble, { alignPoints: [{ align: "cr cl" }, { align: "cl cr" }] })))) : (React.createElement(Dropdown, { closeOnMouseDrag: true, closeOnParentScroll: true, renderButton: function (_a) {
                var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                return (React.createElement(BubbleHoverTrigger, null,
                    React.createElement("div", { ref: buttonRef },
                        React.createElement(DropdownButton, { className: "s-sort-type-measure-button s-inner-measure-dropdown-button", value: measureName, isOpen: isOpen, disabled: disableDropdown, onClick: toggleDropdown, iconLeft: getMeasureIconClassNameBySelected(buttonValue.id, enableRenamingMeasureToMetric) })),
                    React.createElement(Bubble, { alignPoints: [{ align: "cr cl" }, { align: "cl cr" }] })));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown;
                return (React.createElement(DropdownList, { width: width, items: items, className: "gd-measure-sorting-dropdown-body s-measure-sorting-dropdown-body", renderItem: function (_a) {
                        var item = _a.item;
                        var isSelected = item.title === buttonValue.title &&
                            item.sequenceNumber === buttonValue.sequenceNumber;
                        var className = cx("gd-list-item", "gd-list-item-shortened", "gd-sorting-measure", "gd-button-link", getMeasureIconClassNameBySelected(item.id, enableRenamingMeasureToMetric), {
                            "is-selected": isSelected,
                        }, "s-sorting-measure-" + stringUtils.simplifyText(item.title));
                        return (React.createElement("div", { className: "gd-measure-dropdown-list" },
                            React.createElement("button", { className: className, onClick: function () {
                                    onMeasureSelectHandler(item);
                                    closeDropdown();
                                }, title: item.title },
                                React.createElement("span", { className: "gd-sorting-measure-title" }, item.title),
                                item.sequenceNumber ? (React.createElement("span", { className: "gd-sorting-sequence-number" }, item.sequenceNumber)) : null)));
                    } }));
            } })))));
};
//# sourceMappingURL=MeasureDropdown.js.map