import { __read, __spread } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useCallback } from "react";
import { AttributeDropdown } from "./AttributeDropdown/AttributeDropdown";
var getAttributeName = function (bucketItemNames, available) {
    return bucketItemNames[available.itemId.localIdentifier].name;
};
export var ChartSortingDropdown = function (_a) {
    var currentSort = _a.currentSort, availableSorts = _a.availableSorts, bucketItemNames = _a.bucketItemNames, intl = _a.intl, onSelect = _a.onSelect, disabledExplanationTooltip = _a.disabledExplanationTooltip, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var onSortChanged = useCallback(function (newSort, index) {
        var newSortItems = __spread(currentSort);
        newSortItems[index] = newSort;
        onSelect(newSortItems);
    }, [onSelect, currentSort]);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "sort-attribute-section" }, currentSort &&
            currentSort.map(function (currentSortItem, index) {
                // Obtain availables items with same id as current index
                var available = availableSorts[index];
                return (React.createElement("div", { key: index, className: "sort-attribute-item" },
                    currentSort.length > 1 && (React.createElement("div", { className: "attribute-sorting-title" }, getAttributeName(bucketItemNames, available))),
                    React.createElement(AttributeDropdown, { index: index, currentSortItem: currentSortItem, availableSorts: available, bucketItemNames: bucketItemNames, disabledExplanationTooltip: disabledExplanationTooltip, intl: intl, onSelect: function (newSort) {
                            onSortChanged(newSort, index);
                        }, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric })));
            }))));
};
//# sourceMappingURL=ChartSortingDropdown.js.map