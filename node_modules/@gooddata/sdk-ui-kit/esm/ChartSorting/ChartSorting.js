import { __read } from "tslib";
// (C) 2022 GoodData Corporation
import React, { useState, useCallback } from "react";
import { injectIntl, FormattedMessage } from "react-intl";
import { ChartSortingDropdownBody } from "./ChartSortingDropdownBody";
import { ChartSortingDropdown } from "./ChartSortingDropdown";
import { Button } from "../Button";
/**
 * @internal
 */
export var ChartSorting = function (_a) {
    var sortConfig = _a.sortConfig, intl = _a.intl, bucketItemNames = _a.bucketItemNames, onCancel = _a.onCancel, onApply = _a.onApply, onClose = _a.onClose, enableRenamingMeasureToMetric = _a.enableRenamingMeasureToMetric;
    var _b = __read(useState(sortConfig.currentSort), 2), currentSort = _b[0], setCurrentSort = _b[1];
    var disabledExplanationTooltip = sortConfig.disabledExplanation;
    // Available Sorts - from which will generate dropdowns
    var availableSorts = sortConfig.availableSorts;
    var handleApply = useCallback(function () {
        onApply(currentSort);
    }, [currentSort]);
    var onSelect = function (item) {
        setCurrentSort(item);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(ChartSortingDropdownBody, { onClose: onClose },
            React.createElement("div", { className: "gd-sort-charting-dropdown-header s-sort-charting-dropdown-header" },
                React.createElement(FormattedMessage, { tagName: "div", id: "sorting.dropdown.header" })),
            React.createElement("div", { className: "section chart-sorting-body gd-sort-charting-dropdown" },
                React.createElement(ChartSortingDropdown, { currentSort: currentSort, availableSorts: availableSorts, bucketItemNames: bucketItemNames, disabledExplanationTooltip: disabledExplanationTooltip, intl: intl, onSelect: onSelect, enableRenamingMeasureToMetric: enableRenamingMeasureToMetric })),
            React.createElement("div", { className: "chart-sorting-dropdown-footer" },
                React.createElement(Button, { className: "gd-button-secondary gd-button-small s-sorting-dropdown-cancel", value: intl.formatMessage({ id: "cancel" }), onClick: onCancel }),
                React.createElement(Button, { className: "gd-button-action gd-button-small s-sorting-dropdown-apply", value: intl.formatMessage({ id: "apply" }), onClick: handleApply })))));
};
/**
 * @internal
 */
export var ChartSortingWithIntl = injectIntl(ChartSorting);
//# sourceMappingURL=ChartSorting.js.map