// (C) 2019-2022 GoodData Corporation
import { useCallback } from "react";
import isEqual from "lodash/isEqual";
import { useDashboardSelector, selectDashboardTitle, selectDashboardUriRef, selectUser, selectLocale, selectFilterContextFilters, selectDateFormat, selectEnableKPIDashboardScheduleRecipients, selectCanListUsersInWorkspace, selectEnableKPIDashboardSchedule, selectOriginalFilterContextFilters, } from "../../../model";
import { useCreateScheduledEmail } from "./useCreateScheduledEmail";
import { invariant } from "ts-invariant";
export var useScheduledEmail = function (props) {
    var onSubmit = props.onSubmit, onSubmitSuccess = props.onSubmitSuccess, onSubmitError = props.onSubmitError;
    // Bear model expects that all refs are sanitized to uriRefs.
    var dashboardUriRef = useDashboardSelector(selectDashboardUriRef);
    // if this bombs then the controller code is bugged because it should not even allow to get
    // to this point for dashboards that are not persisted. scheduling is not possible for such
    // dashboards and so the respective menus to trigger the scheduling must not be present
    invariant(dashboardUriRef, "attempting to schedule email for unsaved dashboard");
    var dashboardTitle = useDashboardSelector(selectDashboardTitle);
    var currentUser = useDashboardSelector(selectUser);
    var locale = useDashboardSelector(selectLocale);
    var filters = useDashboardSelector(selectFilterContextFilters);
    var originalFilters = useDashboardSelector(selectOriginalFilterContextFilters);
    var dateFormat = useDashboardSelector(selectDateFormat);
    var enableKPIDashboardScheduleRecipients = useDashboardSelector(selectEnableKPIDashboardScheduleRecipients);
    var canListUsersInWorkspace = useDashboardSelector(selectCanListUsersInWorkspace);
    var enableKPIDashboardSchedule = useDashboardSelector(selectEnableKPIDashboardSchedule);
    var scheduledEmailCreator = useCreateScheduledEmail({
        onSuccess: onSubmitSuccess,
        onError: onSubmitError,
        onBeforeRun: onSubmit,
    });
    var handleCreateScheduledEmail = useCallback(function (scheduledEmail, customFilters) {
        // If dashboard filters are not changed, do not save them to scheduled email filter context.
        // Like this, future filter changes stored in the original dashboard filter context
        // are correctly propagated to the scheduled emails with the original filter context.
        var filtersToStore = isEqual(originalFilters, filters) ? undefined : filters;
        scheduledEmailCreator.create(scheduledEmail, customFilters !== null && customFilters !== void 0 ? customFilters : filtersToStore);
    }, [filters, originalFilters]);
    var scheduledEmailCreationStatus = scheduledEmailCreator.creationStatus;
    return {
        dashboardRef: dashboardUriRef,
        dashboardTitle: dashboardTitle,
        canListUsersInWorkspace: canListUsersInWorkspace,
        enableKPIDashboardSchedule: enableKPIDashboardSchedule,
        enableKPIDashboardScheduleRecipients: enableKPIDashboardScheduleRecipients,
        dateFormat: dateFormat,
        currentUser: currentUser,
        locale: locale,
        handleCreateScheduledEmail: handleCreateScheduledEmail,
        scheduledEmailCreationStatus: scheduledEmailCreationStatus,
    };
};
//# sourceMappingURL=useScheduledEmail.js.map